! SoftChalk LessonBuilder TIV File (C)2003-2008
! ================ DO NOT EDIT ================

act_item=3

act_num=1
act_type=2
items=63
colorChoice=_B
showList=false
showFlashCardTerm=true
showFlashCardDef=false
useFlashBigText=false
instructions=Click 'Show' to see the hidden portion.
wordPair[1]=flowcharting|A programming design tool that uses graphical elements to visually depict the flow of logic within a function.|noimage
wordPair[2]=process symbol|A rectangle used in flowcharting for normal processes such as assignment.|noimage
wordPair[3]=input/output symbol|A parallelogram used in flowcharting for input/output interactions.|noimage
wordPair[4]=decision symbol|A diamond used in flowcharting for asking a question and making a decision.|noimage
wordPair[5]=flow lines|Lines (sometimes with arrows) that connect the various flowcharting symbols.|noimage
wordPair[6]=control structures|Mechanisms that allow us to control the flow of execution within a program.|noimage
wordPair[7]=sequence|A control structure where you do the items in the sequence listed. |noimage
wordPair[8]=selection|A control structure where you select between two or more choices.|noimage
wordPair[9]=iteration|A control structure that allows some lines of code to be executed many times. |noimage
wordPair[10]=branching|A control structure that allows the flow of execution to jump to a different part of the program. |noimage
wordPair[11]=structured programming|A method of planning programs that avoids the branching category of control structures.|noimage
wordPair[12]=Boolean|A data type representing the concepts of true and false.|noimage
wordPair[13]=test expression|An expression used to control programming structures.|noimage
wordPair[14]=relational operator|An operator that gives a Boolean value by evaluating the relationship between two operands.|noimage
wordPair[15]=mutually exclusive|Items that do not overlap. Example: true and false.|noimage
wordPair[16]=if then else|A two way selection control structure.|noimage
wordPair[17]=compound statement|A unit of code consisting of zero or more statements.|noimage
wordPair[18]=block|Another name for a compound statement.|noimage
wordPair[19]=logical operator|An operator used to create complex Boolean expressions.|noimage
wordPair[20]=truth tables|A common way to show logical relationships.|noimage
wordPair[21]=branching control structures|Allow the flow of execution to jump to a different part of the program. |noimage
wordPair[22]=break|A branching control structure that terminates the existing structure.|noimage
wordPair[23]=continue|A branching control structure that causes a loop to stop its current iteration and begin the next one. |noimage
wordPair[24]=goto|A branching control structure that causes the logic to jump to a different place in the program. |noimage
wordPair[25]=return|A branching control structure that causes a function to jump back to the function that called it. |noimage
wordPair[26]=exit|A pre-defined function used to prematurely stop a program and jump to the operating system. |noimage
wordPair[27]=nested control structures|Placing one control structure inside of another. |noimage
wordPair[28]=multiway selection|Using control structures to be able to select from more than two choices.|noimage
wordPair[29]=case|A control structure that does mulitway selection.|noimage
wordPair[30]=switch|A C++ control structure that can be made to act like a case control structure.|noimage
wordPair[31]=flag|A variable or constant used to store information that will normally be used to control the program. |noimage
wordPair[32]=do while|A test after iteration control structure available in C++.|noimage
wordPair[33]=action item|An attribute of iteration control structures.|noimage
wordPair[34]=update item|An attribute of iteration control structures.|noimage
wordPair[35]=test item|An attribute of iteration control structures.|noimage
wordPair[36]=at least once|Indicating that test after loops execute the action at least once.|noimage
wordPair[37]=infinite loop|"No method of exit, thus a bad thing."|noimage
wordPair[38]=repeat until|A test after iteration control structure that is not available in C++.|noimage
wordPair[39]=increment|Adding one to the value of a variable.|noimage
wordPair[40]=decrement|Subtracting one from the value of a variable.|noimage
wordPair[41]=postfix|Placing the increment or decrement operator to the right of the operand.|noimage
wordPair[42]=prefix|Placing the increment or decrement operator to the left of the operand.|noimage
wordPair[43]=while|A test before iteration control structure available in C++.|noimage
wordPair[44]=loop attributes|Items associated with iteration or looping control structures.|noimage
wordPair[45]=initialize item|An attribute of iteration control structures.|noimage
wordPair[46]=might not happen|Indicating that test before loops might not execute the action.|noimage
wordPair[47]=event controlled|Using user input to control a loop.|noimage
wordPair[48]=counting controlled|Using a variable to count up or down to control a loop.|noimage
wordPair[49]=for|A test before iteration control structure typically used for counting.|noimage
wordPair[50]=complex logic|Often solved with nested control structures.|noimage
wordPair[51]=formatting|Modifying the way the output is displayed.|noimage
wordPair[52]=wrapping|When output is not vertically spaced properly.|noimage
wordPair[53]=circular nature|Connecting the negative and positive ends of the domain of an integer family data type.|noimage
wordPair[54]=loop control|Making sure the attributes of a loop are properly handled.|noimage
wordPair[55]=modular arithmetic|A system of arithmetic for integers where numbers ""wrap around".|noimage
wordPair[56]=unary positive|A worthless operator almost never used.|noimage
wordPair[57]=unary negative|An operator that causes negation.|noimage
wordPair[58]=plus|Aka unary positive.|noimage
wordPair[59]=minus|Aka unary negative.|noimage
wordPair[60]=array|A sequenced collection of elements of the same data type with a single identifier name.|noimage
wordPair[61]=concatenation|Combining two strings into one string.|noimage
wordPair[62]=string class|A complex data item that uses object oriented programming.|noimage
wordPair[63]=class member|An operator used to invoke functions associated with a class.|noimage
inline=false
points=0
showRestart=true
sqrsize=20
adaDescription=
playFeedback=true
hotspotWidth=450
hotspotHeight=500

act_num=2
act_type=6
items=50
colorChoice=_B
showList=false
showFlashCardTerm=true
showFlashCardDef=false
useFlashBigText=false
instructions=Solve the crossword puzzle.
wordPair[1]=flowcharting|A programming design tool that uses graphical elements to visually depict the flow of logic within a function.
wordPair[2]=ProcessSymbol|A rectangle used in flowcharting for normal processes such as assignment.
wordPair[3]=DecisionSymbol|A diamond used in flowcharting for asking a question and making a decision.
wordPair[4]=FlowLines|Lines (sometimes with arrows) that connect the various flowcharting symbols.
wordPair[5]=sequence|A control structure where you do the items in the sequence listed.
wordPair[6]=selection|A control structure where you select between two or more choices.
wordPair[7]=iteration|A control structure that allows some lines of code to be executed many times.
wordPair[8]=branching|A control structure that allows the flow of execution to jump to a different part of the program.
wordPair[9]=Boolean|A data type representing the concepts of true and false.
wordPair[10]=TestExpression|An expression used to control programming structures.
wordPair[11]=IfThenElse|A two way selection control structure.
wordPair[12]=block|Another name for a compound statement.
wordPair[13]=TruthTables|A common way to show logical relationships.
wordPair[14]=break|A branching control structure that terminates the existing structure.
wordPair[15]=continue|A branching control structure that causes a loop to stop its current iteration and begin the next one.
wordPair[16]=goto|A branching control structure that causes the logic to jump to a different place in the program.
wordPair[17]=return|A branching control structure that causes a function to jump back to the function that called it.
wordPair[18]=exit|A pre-defined function used to prematurely stop a program and jump to the operating system.
wordPair[19]=case|A control structure that does mulitway selection.
wordPair[20]=switch|A C++ control structure that can be made to act like a case control structure.
wordPair[21]=flag|A variable or constant used to store information that will normally be used to control the program.
wordPair[22]=DoWhile|A test after iteration control structure available in C++.
wordPair[23]=AtLeastOnce|Indicating that test after loops execute the action at least once.
wordPair[24]=InfiniteLoop|"No method of exit, thus a bad thing."
wordPair[25]=RepeatUntil|A test after iteration control structure that is not available in C++.
wordPair[26]=increment|Adding one to the value of a variable.
wordPair[27]=decrement|Subtracting one from the value of a variable.
wordPair[28]=postfix|Placing the increment or decrement operator to the right of the operand.
wordPair[29]=prefix|Placing the increment or decrement operator to the left of the operand.
wordPair[30]=while|A test before iteration control structure available in C++.
wordPair[31]=LoopAttributes|Items associated with iteration or looping control structures.
wordPair[32]=MightNotHappen|Indicating that test before loops might not execute the action.
wordPair[33]=for|A test before iteration control structure typically used for counting.
wordPair[34]=ComplexLogic|Often solved with nested control structures.
wordPair[35]=formatting|Modifying the way the output is displayed.
wordPair[36]=wrapping|When output is not vertically spaced properly.
wordPair[37]=CircularNature|Connecting the negative and positive ends of the domain of an integer family data type.
wordPair[38]=LoopControl|Making sure the attributes of a loop are properly handled.
wordPair[39]=UnaryPositive|A worthless operator almost never used.
wordPair[40]=UnaryNegative|An operator that causes negation.
wordPair[41]=plus|Aka unary positive.
wordPair[42]=minus|Aka unary negative.
wordPair[43]=array|A sequenced collection of elements of the same data type with a single identifier name.
wordPair[44]=concatenation|Combining two strings into one string.
wordPair[45]=StringClass|A complex data item that uses object oriented programming.
wordPair[46]=ClassMember|An operator used to invoke functions associated with a class.
wordPair[47]=ActionItem|An attribute of iteration control structures.
wordPair[48]=InitializeItem|An attribute of iteration control structures.
wordPair[49]=UpdateItem|An attribute of iteration control structures.
wordPair[50]=TestItem|An attribute of iteration control structures.
inline=false
points=0
showRestart=true
sqrsize=20
adaDescription=
playFeedback=true
hotspotWidth=450
hotspotHeight=500

