! SoftChalk LessonBuilder TIV File (C)2003-2008
! ================ DO NOT EDIT ================

act_item=2

act_num=1
act_type=2
items=69
colorChoice=_B
showList=false
showFlashCardTerm=true
showFlashCardDef=false
useFlashBigText=false
instructions=Click 'Show' to see the hidden portion.
wordPair[1]=system analyst|Computer professional in charge of creating applications.|noimage
wordPair[2]=applications|An information system or collection of programs that handles a major task.|noimage
wordPair[3]=life cycle|Systems Development Life Cycle: Planning - Analysis - Design - Implementation - Maintenance|noimage
wordPair[4]=implementation|The phase of a Systems Development Life Cycle where the programmers would be assigned to write specific programs.|noimage
wordPair[5]=open source|Group development of source code for software that is made available to the public at no cost.|noimage
wordPair[6]=portability|The ability to transport software on a flash drive and thus use it on various machines.|noimage
wordPair[7]=folder|A named area for storage of documents or other files on a disk drive or flash drive.|noimage
wordPair[8]=source code|Any collection of statements or declarations written in some human-readable computer programming language.|noimage
wordPair[9]=modularization|The ability to group some lines of code into a unit that can be included in our program.|noimage
wordPair[10]=function|What modules are called in the two predominant programming languages of today: C++ and Java.|noimage
wordPair[11]=program control|Functions used to simply sub divide and control the program.|noimage
wordPair[12]=specific task|Functions designed to be used with several programs.|noimage
wordPair[13]=parameter passing|How the data is communicated in to and out of a function.|noimage
wordPair[14]=identifier name|The name given by the programmer to identify a function or other program items such as variables.|noimage
wordPair[15]=function prototype|A function's communications declaration to a complier.|noimage
wordPair[16]=function call|A function's using or invoking of another function.|noimage
wordPair[17]=function definition|The code that defines what a function does.|noimage
wordPair[18]=braces|Used to identify a block of code in C++.|noimage
wordPair[19]=IPO|Inputs - Processing - Outputs|noimage
wordPair[20]=pseudocode|English-like statements used to convey the steps of an algorithm or function. |noimage
wordPair[21]=test data|Providing input values and predicting the outputs.|noimage
wordPair[22]=pseudo |Means false and includes the concepts of fake or imitation.|noimage
wordPair[23]=model checking|Using test data to check the design model (usually done in pseudocode).|noimage
wordPair[24]=code checking|Using test data to check the coded program in a specific language (like C++).|noimage
wordPair[25]=data type|Defines a set of values and a set of operations that can be applied on those values.|noimage
wordPair[26]=date type families|1) Nothing 2) Integer 3) Floating-Point 4) Complex|noimage
wordPair[27]=domain|The set of allowed values for a data type.|noimage
wordPair[28]=integer|A data type representing whole numbers.|noimage
wordPair[29]=floating point|A data type representing numbers with fractional parts.|noimage
wordPair[30]=reserved word|Words that can not be used by the programmer as identifier names because they already have a specific meaning within the programming language.|noimage
wordPair[31]=constant|A data item whose value cannot change during the program's execution.|noimage
wordPair[32]=variable|A data item whose value can change during the program's execution.|noimage
wordPair[33]=expression|A valid sequence of operand(s) and operator(s) that reduces (or evaluates) to a single value.|noimage
wordPair[34]=operator|A language-specific syntactical token (usually a symbol) that causes an action to be taken on one or more operands.|noimage
wordPair[35]=operand|A value that receives the operator's action.|noimage
wordPair[36]=precedence|Determines the order in which the operators are allowed to manipulate the operands.|noimage
wordPair[37]=associativity|Determines the order in which the operators of the same precedence are allowed to manipulate the operands.|noimage
wordPair[38]=evaluation|The process of applying the operators to the operands and resulting in a single value.|noimage
wordPair[39]=parentheses|Change the order of evaluation in an expression. You do what's in the parentheses first.|noimage
wordPair[40]=assignment|An operator that changes the value of a modifiable data object.|noimage
wordPair[41]=implicit|A value that has its data type changed automatically.|noimage
wordPair[42]=explicit|Changing a value's data type with the cast operator.|noimage
wordPair[43]=promotion|Going from a smaller domain to a larger domain.|noimage
wordPair[44]=demotion|Going from a larger domain to a smaller domain.|noimage
wordPair[45]=truncation|The fractional part of a floating-point data type that is dropped when converted to an integer.|noimage
wordPair[46]=machine dependent|An attribute of a programming language that changes depending on the computer's CPU.|noimage
wordPair[47]=double|The most often used floating-point family data type used in C++. |noimage
wordPair[48]=precision|The effect on the domain of floating-point values given a larger or smaller storage area in bytes.|noimage
wordPair[49]=mantissa exponent|The two integer parts of a floating-point value.|noimage
wordPair[50]=string|A series or array of characters as a single piece of data.|noimage
wordPair[51]=Lvalue|The requirement that the operand on the left side of the assignment operator is modifiable usually a variable.|noimage
wordPair[52]=Rvalue|Pulls or fetches the value stored in a variable or constant.|noimage
wordPair[53]=integer division|Division with no fractional parts.|noimage
wordPair[54]=modulus|The remainder part of integer division.|noimage
wordPair[55]=text editor|A software program for creating and editing ASCII text files.|noimage
wordPair[56]=compiler|Converts source code to object code.|noimage
wordPair[57]=pre processor|The first step the complier does in converting source code to object code.|noimage
wordPair[58]=linker|Connects or links object files into an executable file.|noimage
wordPair[59]=loader|Part of the operating system that loads executable files into memory and direct the CPU to start running the program.|noimage
wordPair[60]=debugging|The process of removing errors from a program. 1) compiler 2) linker 3) logic|noimage
wordPair[61]=warning|A compiler alert that there might be a problem.|noimage
wordPair[62]=device|A piece of equipment that is electronically connected to the memory so that data can be transferred between the memory and the device.|noimage
wordPair[63]=standard input|The keyboard.|noimage
wordPair[64]=standard output|The monitor.|noimage
wordPair[65]=insertion|Aka writing or sending data to an output device.|noimage
wordPair[66]=extraction|Aka reading or getting data from an input device.|noimage
wordPair[67]=escape code|An code directing an output device to do something.|noimage
wordPair[68]=compiler directive|An instruction to the compiler to complete a task before formally starting to compile the program.|noimage
wordPair[69]=include|A compiler directive to insert the contents of a file into the program.|noimage
inline=false
points=0
showRestart=true
sqrsize=20
adaDescription=
playFeedback=true
hotspotWidth=450
hotspotHeight=500

act_num=2
act_type=6
items=69
colorChoice=_B
showList=false
showFlashCardTerm=true
showFlashCardDef=false
useFlashBigText=false
instructions=Solve the crossword puzzle.
wordPair[1]=SystemAnalyst|Computer professional in charge of creating applications.
wordPair[2]=applications|An information system or collection of programs that handles a major task.
wordPair[3]=LifeCycle|Systems Development Life Cycle: Planning - Analysis - Design - Implementation - Maintenance
wordPair[4]=implementation|The phase of a Systems Development Life Cycle where the programmers would be assigned to write specific programs.
wordPair[5]=OpenSource|Group development of source code for software that is made available to the public at no cost.
wordPair[6]=portability|The ability to transport software on a flash drive and thus use it on various machines.
wordPair[7]=folder|A named area for storage of documents or other files on a disk drive or flash drive.
wordPair[8]=SourceCode|Any collection of statements or declarations written in some human-readable computer programming language.
wordPair[9]=modularization|The ability to group some lines of code into a unit that can be included in our program.
wordPair[10]=function|What modules are called in the two predominant programming languages of today: C++ and Java.
wordPair[11]=ProgramControl|Functions used to simply sub divide and control the program.
wordPair[12]=SpecificTask|Functions designed to be used with several programs.
wordPair[13]=IdentifierName|The name given by the programmer to identify a function or other program items such as variables.
wordPair[14]=FunctionCall|A function's using or invoking of another function.
wordPair[15]=braces|Used to identify a block of code in C++.
wordPair[16]=IPO|Inputs - Processing - Outputs
wordPair[17]=pseudocode|English-like statements used to convey the steps of an algorithm or function.
wordPair[18]=TestData|Providing input values and predicting the outputs.
wordPair[19]=pseudo|Means false and includes the concepts of fake or imitation.
wordPair[20]=ModelChecking|Using test data to check the design model (usually done in pseudocode).
wordPair[21]=CodeChecking|Using test data to check the coded program in a specific language (like C++).
wordPair[22]=DataType|Defines a set of values and a set of operations that can be applied on those values.
wordPair[23]=domain|The set of allowed values for a data type.
wordPair[24]=integer|A data type representing whole numbers.
wordPair[25]=FloatingPoint|A data type representing numbers with fractional parts.
wordPair[26]=ReservedWord|Words that can not be used by the programmer as identifier names because they already have a specific meaning within the programming language.
wordPair[27]=constant|A data item whose value cannot change during the program's execution.
wordPair[28]=variable|A data item whose value can change during the program's execution.
wordPair[29]=expression|A valid sequence of operand(s) and operator(s) that reduces (or evaluates) to a single value.
wordPair[30]=operator|A language-specific syntactical token (usually a symbol) that causes an action to be taken on one or more operands.
wordPair[31]=operand|A value that receives the operator's action.
wordPair[32]=precedence|Determines the order in which the operators are allowed to manipulate the operands.
wordPair[33]=associativity|Determines the order in which the operators of the same precedence are allowed to manipulate the operands.
wordPair[34]=evaluation|The process of applying the operators to the operands and resulting in a single value.
wordPair[35]=parentheses|Change the order of evaluation in an expression. You do what's in the parentheses first.
wordPair[36]=assignment|An operator that changes the value of a modifiable data object.
wordPair[37]=implicit|A value that has its data type changed automatically.
wordPair[38]=explicit|Changing a value's data type with the cast operator.
wordPair[39]=promotion|Going from a smaller domain to a larger domain.
wordPair[40]=demotion|Going from a larger domain to a smaller domain.
wordPair[41]=truncation|The fractional part of a floating-point data type that is dropped when converted to an integer.
wordPair[42]=double|The most often used floating-point family data type used in C++.
wordPair[43]=precision|The effect on the domain of floating-point values given a larger or smaller storage area in bytes.
wordPair[44]=string|A series or array of characters as a single piece of data.
wordPair[45]=Lvalue|The requirement that the operand on the left side of the assignment operator is modifiable usually a variable.
wordPair[46]=Rvalue|Pulls or fetches the value stored in a variable or constant.
wordPair[47]=modulus|The remainder part of integer division.
wordPair[48]=TextEditor|A software program for creating and editing ASCII text files.
wordPair[49]=compiler|Converts source code to object code.
wordPair[50]=PreProcessor|The first step the complier does in converting source code to object code.
wordPair[51]=linker|Connects or links object files into an executable file.
wordPair[52]=loader|Part of the operating system that loads executable files into memory and direct the CPU to start running the program.
wordPair[53]=debugging|The process of removing errors from a program. 1) compiler 2) linker 3) logic
wordPair[54]=warning|A compiler alert that there might be a problem.
wordPair[55]=device|A piece of equipment that is electronically connected to the memory so that data can be transferred between the memory and the device.
wordPair[56]=StandardInput|The keyboard.
wordPair[57]=StandardOutput|The monitor.
wordPair[58]=insertion|Aka writing or sending data to an output device.
wordPair[59]=extraction|Aka reading or getting data from an input device.
wordPair[60]=EscapeCode|An code directing an output device to do something.
wordPair[61]=include|A compiler directive to insert the contents of a file into the program.
wordPair[62]=CompilerDirective|An instruction to the compiler to complete a task before formally starting to compile the program.
wordPair[63]=MachineDependent|An attribute of a programming language that changes depending on the computer's CPU.
wordPair[64]=MantissaExponent|The two integer parts of a floating-point value.
wordPair[65]=IntegerDivision|Division with no fractional parts.
wordPair[66]=DateTypeFamilies|1) Nothing 2) Integer 3) Floating-Point 4) Complex
wordPair[67]=ParameterPassing|How the data is communicated in to and out of a function.
wordPair[68]=FunctionPrototype|A function's communications declaration to a complier.
wordPair[69]=FunctionDefinition|The code that defines what a function does.
inline=false
points=0
showRestart=true
sqrsize=20
adaDescription=
playFeedback=true
hotspotWidth=450
hotspotHeight=500

